<style>
    .product-recommendations {
        width: 100%;
        max-width: 1206px;
        margin: 0 auto;
        padding: 0 10px;
    }
    .product-recommendations h2 {
        text-align: center;
        text-transform: uppercase;
        font-size: 40px;
        letter-spacing: 1px;
    }
    .product-recommendations__prev-btn {
        display: block;
        position: absolute;
        top: 50%;
        left: 0;
        transform: translateY(-50%);
        cursor: pointer;
        z-index: 2;
    }
    .product-recommendations__prev-btn > svg {
      transform: scale(-1);
    }
    .product-recommendations__next-btn {
        display: block;
        position: absolute;
        top: 50%;
        right: 0;
        transform: translateY(-50%);
        cursor: pointer;
        z-index: 2;
    }
    .product-recommendations .slick-slider {
        padding: 0;
    }
    .product-recommendations a {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        justify-content: center;
        text-decoration: none;
        position: relative;
    }
    .product__img {
        align-self: center;
    }
    .product__title {
        text-align: left;
        font-weight: 700;
        font-size: 20px;
        text-transform: uppercase;
        line-height: 32px;
        color: #000;
        letter-spacing: 1px;
    }
    .product-recommendations .product__price {
        font-weight: 400;
        font-size: 16px;
        color: #000;
        margin: 0;
    }
    .slick-initialized .slick-slide {
      padding: 0 10px;
    }
    .product-recommendations .badge {
      background: #ce0f2d;
      color: #fff;
      position: absolute;
      top: 0;
      left: 0;
    }
    body.hide-price .product__price {
      display: none !important;
    }
    @media (max-width: 1024px)  {
      .product-recommendations__prev-btn {
        left: 16px
      }
      .product-recommendations .slick-slider {
        padding: 0 20px;
      }
      .product-recommendations__next-btn {
        right: 16px;
      }
    }
</style>

<div
  class="product-recommendations"
  data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4&intent=related"
>
  {%- if recommendations.performed? and recommendations.products_count > 0 -%}
    {% if recommendations.intent == 'related' %}
      <h2>You may like these too</h2>
    {% elsif recommendations.intent == 'complementary' %}
      <h2>Pair it with</h2>
    {% endif %}

    <div class="product-recommendations-product-lists">
      {%- for product in recommendations.products -%}
        <div class="product">
          <a href="{{ product.url }}">
            {% if product.available != false %}
              {% for tag in product.tags %}
                {% if tag contains '_label:' %}
                  {% assign badge = tag | remove: '_label:' %}
                  <span class="badge">{{ badge }}</span>
                {% endif %}
              {% endfor %}
            {% endif %}

            {% if product.available == false %}
              <span class="badge">Sold Out</span>
            {% endif %}
            {% if product.compare_at_price > product.price %}
              <span class="badge">Sale</span>
            {% endif %}
            <img
              class="product__img"
              src="{{ product.featured_image | image_url: width: 300, height: 300 }}"
              alt="{{ product.featured_image.alt }}"
            />

            <p class="product__title">{{ product.title }}</p>
            <p class="product__price">{{ product.price | money}}</p>
            <div class="yotpo-widget-instance" data-yotpo-instance-id="851116" data-yotpo-product-id="{{product.id}}" data-yotpo-cart-product-id="{{product.id}}" data-yotpo-section-id="collection"></div>
          </a>
        </div>
      {%- endfor -%}
    </div>
  {%- endif -%}
</div>

{% javascript %}

window.addEventListener('load', function() {
  const handleIntersection = (entries, observer) => {
    // if (!entries[0].isIntersecting) return;
    observer.unobserve(productRecommendationsSection);

    const url = productRecommendationsSection.dataset.url;

    fetch(url)
    
      .then(response => response.text())
      .then(text => {
        if (typeof Yotpo !== 'undefined' && typeof window.yotpo !== 'undefined') {  var api = new Yotpo.API(window.yotpo);  api.refreshWidgets();}if (typeof yotpoWidgetsContainer !== 'undefined') {  yotpoWidgetsContainer.initWidgets();}

        
        const html = document.createElement('div');
        html.innerHTML = text;
        const recommendations = html.querySelector('.product-recommendations');

        if (recommendations && recommendations.innerHTML.trim().length) {
          productRecommendationsSection.innerHTML = recommendations.innerHTML;
          $('.product-recommendations .product-recommendations-product-lists').slick({
                infinite: true,
                slidesToShow: 3,
                slidesToScroll: 1,
                prevArrow:`<div class="product-recommendations__prev-btn"><svg width="44" height="44" viewBox="0 0 44 44" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="22" cy="22" r="21.5" transform="rotate(-180 22 22)" stroke="#5C5D60"/>
                            <path d="M18 30L26 21.5L18 13" stroke="#5C5D60" stroke-width="2" stroke-linecap="round"/>
                            </svg></div>`,
                nextArrow:`<div class="product-recommendations__next-btn"><svg width="44" height="44" viewBox="0 0 44 44" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="22" cy="22" r="21.5" transform="rotate(-180 22 22)" stroke="#5C5D60"/>
                <path d="M18 30L26 21.5L18 13" stroke="#5C5D60" stroke-width="2" stroke-linecap="round"/>
                </svg></div>`,
                responsive: [
                  {
                    breakpoint: 1024,
                    settings: {
                      centerPadding: '40px',
                      slidesToShow: 2
                    }
                  },
                  {
                    breakpoint: 768,
                    settings: {
                      centerPadding: '40px',
                      slidesToShow: 1
                    }
                  }
                ]
            });
        }
      })
      .catch(e => {
        console.error(e);
      });
  };

  const productRecommendationsSection = document.querySelector('.product-recommendations');
  const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});

  observer.observe(productRecommendationsSection);
});
   
{% endjavascript %}

{% schema %}
  {
    "name": "Product recommendations",
    "settings": [],
    "presets": [
        {
        "name": "Product recommendations"
        }
    ]
  }
{% endschema %}